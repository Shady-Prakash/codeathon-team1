datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id        String @id @default(uuid())
  firstName String @db.Text
  lastName  String @db.Text
  email     String @unique
  password  String
  role      Role   @relation(fields: [roleId], references: [id])
  roleId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roleId])
}

model Role {
  id     String  @id @default(uuid())
  title  String
  status Boolean
  user   User[]
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Campaign {
  id           String    @id @default(uuid())
  userId       String
  title        String    @db.Text
  description  String?   @db.Text
  imageUrl     String?   @db.Text
  fund         Float?
  startingDate DateTime?
  isPublished  Boolean   @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@fulltext([title])
}

model Category {
  id       String     @id @default(uuid())
  name     String     @unique
  Campaign Campaign[]
  Course   Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id     String @id @default(uuid())
  userId String
  title  String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donor {
  id      String    @id @default(uuid())
  name    String    @db.Text
  email   String    @unique
  address Address[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id            String @id @default(uuid())
  streetAddress String
  City          String
  State         String
  Country       String
  zipCode       String

  donorId String
  donor   Donor  @relation(fields: [donorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([donorId])
}

// model Member {
//   id        String  @id @default(uuid())
//   firstName String
//   lastName  String? @db.Text
//   email     String? @db.Text
//   isActive  Boolean @default(false)

//   organizationId String
//   organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([organizationId])
// }

model Company {
  id             Int    @id @default(autoincrement())
  companyName    String @unique
  companyAddress String
  contactPerson  String
  contactEmail   String @unique
  status         String @default("pending")
}
